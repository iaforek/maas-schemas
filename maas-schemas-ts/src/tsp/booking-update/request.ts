/*

undefined
Request schema for update a state of a specific booking with a TSP ID from a TSP adapter

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Booking_ from '../../core/booking';
import * as Configurator_ from '../../core/components/configurator';
import * as BookingMeta_ from '../../core/booking-meta';
import * as CustomerSelection_ from '../../core/components/customerSelection';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId = 'http://maasglobal.com/tsp/booking-update/request.json';

// Request
// The default export. More information at the top.
export type Request = t.Branded<
  ({
    tspId?: Booking_.TspId;
    state?: 'RESERVED' | 'ACTIVATED' | 'ON_HOLD' | 'EXPIRED';
    configurator?: Configurator_.Configurator;
    meta?: BookingMeta_.BookingMeta;
    terms?: Booking_.Terms;
    customerSelection?: CustomerSelection_.CustomerSelection;
  } & Record<string, unknown>) & {
    tspId: Defined;
  },
  RequestBrand
>;
export type RequestC = t.BrandC<
  t.IntersectionC<
    [
      t.IntersectionC<
        [
          t.PartialC<{
            tspId: typeof Booking_.TspId;
            state: t.UnionC<
              [
                t.LiteralC<'RESERVED'>,
                t.LiteralC<'ACTIVATED'>,
                t.LiteralC<'ON_HOLD'>,
                t.LiteralC<'EXPIRED'>,
              ]
            >;
            configurator: typeof Configurator_.Configurator;
            meta: typeof BookingMeta_.BookingMeta;
            terms: typeof Booking_.Terms;
            customerSelection: typeof CustomerSelection_.CustomerSelection;
          }>,
          t.RecordC<t.StringC, t.UnknownC>,
        ]
      >,
      t.TypeC<{
        tspId: typeof Defined;
      }>,
    ]
  >,
  RequestBrand
>;
export const Request: RequestC = t.brand(
  t.intersection([
    t.intersection([
      t.partial({
        tspId: Booking_.TspId,
        state: t.union([
          t.literal('RESERVED'),
          t.literal('ACTIVATED'),
          t.literal('ON_HOLD'),
          t.literal('EXPIRED'),
        ]),
        configurator: Configurator_.Configurator,
        meta: BookingMeta_.BookingMeta,
        terms: Booking_.Terms,
        customerSelection: CustomerSelection_.CustomerSelection,
      }),
      t.record(t.string, t.unknown),
    ]),
    t.type({
      tspId: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    ({
      tspId?: Booking_.TspId;
      state?: 'RESERVED' | 'ACTIVATED' | 'ON_HOLD' | 'EXPIRED';
      configurator?: Configurator_.Configurator;
      meta?: BookingMeta_.BookingMeta;
      terms?: Booking_.Terms;
      customerSelection?: CustomerSelection_.CustomerSelection;
    } & Record<string, unknown>) & {
      tspId: Defined;
    },
    RequestBrand
  > => true,
  'Request',
);
export interface RequestBrand {
  readonly Request: unique symbol;
}

export default Request;

// Success
