/*

undefined
Remote response schema, e.g. how MaaS-backend responds back to TSP

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Units_ from '../../core/components/units';
import * as Booking_ from '../../core/booking';
import * as BookingOption_ from '../../core/booking-option';
import * as BookingMeta_ from '../../core/booking-meta';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'http://maasglobal.com/tsp/webhooks-bookings-update/remote-response.json';

// BookingDelta
// The purpose of this remains a mystery
export type BookingDelta = t.Branded<
  {
    id?: Units_.Uuid;
    tspId?: Booking_.TspId;
    cost?: Booking_.Cost;
    state?: 'RESERVED' | 'CONFIRMED' | 'ACTIVATED' | 'EXPIRED' | 'CANCELLED' | 'REJECTED';
    leg?: BookingOption_.Leg;
    meta?: BookingMeta_.BookingMeta;
    terms?: Booking_.Terms;
    token?: Booking_.Token;
    customer?: BookingOption_.Customer;
  } & {
    tspId: Defined;
    state: Defined;
  },
  BookingDeltaBrand
>;
export type BookingDeltaC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        id: typeof Units_.Uuid;
        tspId: typeof Booking_.TspId;
        cost: typeof Booking_.Cost;
        state: t.UnionC<
          [
            t.LiteralC<'RESERVED'>,
            t.LiteralC<'CONFIRMED'>,
            t.LiteralC<'ACTIVATED'>,
            t.LiteralC<'EXPIRED'>,
            t.LiteralC<'CANCELLED'>,
            t.LiteralC<'REJECTED'>,
          ]
        >;
        leg: typeof BookingOption_.Leg;
        meta: typeof BookingMeta_.BookingMeta;
        terms: typeof Booking_.Terms;
        token: typeof Booking_.Token;
        customer: typeof BookingOption_.Customer;
      }>,
      t.TypeC<{
        tspId: typeof Defined;
        state: typeof Defined;
      }>,
    ]
  >,
  BookingDeltaBrand
>;
export const BookingDelta: BookingDeltaC = t.brand(
  t.intersection([
    t.partial({
      id: Units_.Uuid,
      tspId: Booking_.TspId,
      cost: Booking_.Cost,
      state: t.union([
        t.literal('RESERVED'),
        t.literal('CONFIRMED'),
        t.literal('ACTIVATED'),
        t.literal('EXPIRED'),
        t.literal('CANCELLED'),
        t.literal('REJECTED'),
      ]),
      leg: BookingOption_.Leg,
      meta: BookingMeta_.BookingMeta,
      terms: Booking_.Terms,
      token: Booking_.Token,
      customer: BookingOption_.Customer,
    }),
    t.type({
      tspId: Defined,
      state: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: Units_.Uuid;
      tspId?: Booking_.TspId;
      cost?: Booking_.Cost;
      state?:
        | 'RESERVED'
        | 'CONFIRMED'
        | 'ACTIVATED'
        | 'EXPIRED'
        | 'CANCELLED'
        | 'REJECTED';
      leg?: BookingOption_.Leg;
      meta?: BookingMeta_.BookingMeta;
      terms?: Booking_.Terms;
      token?: Booking_.Token;
      customer?: BookingOption_.Customer;
    } & {
      tspId: Defined;
      state: Defined;
    },
    BookingDeltaBrand
  > => true,
  'BookingDelta',
);
export interface BookingDeltaBrand {
  readonly BookingDelta: unique symbol;
}

// RemoteResponse
// The default export. More information at the top.
export type RemoteResponse = t.Branded<
  {
    booking?: BookingDelta;
    debug?: Record<string, unknown>;
  },
  RemoteResponseBrand
>;
export type RemoteResponseC = t.BrandC<
  t.PartialC<{
    booking: typeof BookingDelta;
    debug: t.RecordC<t.StringC, t.UnknownC>;
  }>,
  RemoteResponseBrand
>;
export const RemoteResponse: RemoteResponseC = t.brand(
  t.partial({
    booking: BookingDelta,
    debug: t.record(t.string, t.unknown),
  }),
  (
    x,
  ): x is t.Branded<
    {
      booking?: BookingDelta;
      debug?: Record<string, unknown>;
    },
    RemoteResponseBrand
  > => true,
  'RemoteResponse',
);
export interface RemoteResponseBrand {
  readonly RemoteResponse: unique symbol;
}

export default RemoteResponse;

// Success
