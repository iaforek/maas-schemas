/*

undefined
Response schema for managing TSP

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as BookingMeta_ from '../../core/booking-meta';
import * as Booking_ from '../../core/booking';
import * as BookingOption_ from '../../core/booking-option';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId = 'http://maasglobal.com/tsp/manage/response.json';

// Response
// The default export. More information at the top.
export type Response = t.Branded<
  ({
    success?: boolean;
    message?: string;
    updateBookingsWith?: {
      meta?: BookingMeta_.BookingMeta;
      terms?: Booking_.Terms;
      token?: Booking_.Token;
      tspProducts?: Array<BookingOption_.TspProduct>;
    };
  } & Record<string, unknown>) & {
    success: Defined;
  },
  ResponseBrand
>;
export type ResponseC = t.BrandC<
  t.IntersectionC<
    [
      t.IntersectionC<
        [
          t.PartialC<{
            success: t.BooleanC;
            message: t.StringC;
            updateBookingsWith: t.PartialC<{
              meta: typeof BookingMeta_.BookingMeta;
              terms: typeof Booking_.Terms;
              token: typeof Booking_.Token;
              tspProducts: t.ArrayC<typeof BookingOption_.TspProduct>;
            }>;
          }>,
          t.RecordC<t.StringC, t.UnknownC>,
        ]
      >,
      t.TypeC<{
        success: typeof Defined;
      }>,
    ]
  >,
  ResponseBrand
>;
export const Response: ResponseC = t.brand(
  t.intersection([
    t.intersection([
      t.partial({
        success: t.boolean,
        message: t.string,
        updateBookingsWith: t.partial({
          meta: BookingMeta_.BookingMeta,
          terms: Booking_.Terms,
          token: Booking_.Token,
          tspProducts: t.array(BookingOption_.TspProduct),
        }),
      }),
      t.record(t.string, t.unknown),
    ]),
    t.type({
      success: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    ({
      success?: boolean;
      message?: string;
      updateBookingsWith?: {
        meta?: BookingMeta_.BookingMeta;
        terms?: Booking_.Terms;
        token?: Booking_.Token;
        tspProducts?: Array<BookingOption_.TspProduct>;
      };
    } & Record<string, unknown>) & {
      success: Defined;
    },
    ResponseBrand
  > => true,
  'Response',
);
export interface ResponseBrand {
  readonly Response: unique symbol;
}

export default Response;

// Success
