/*

undefined
Save user consent to send all TSP required personal documents to TSP

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Units_ from '../../../../core/components/units';
import * as PersonalDocument_ from '../../../../core/personal-document';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'http://maasglobal.com/maas-backend/customers/personal-documents/consent/response.json';

// Response
// The default export. More information at the top.
export type Response = t.Branded<
  ({
    identityId?: Units_.IdentityId;
    id?: Units_.Uuid;
    partyId?: PersonalDocument_.PartyId;
    partyType?: PersonalDocument_.PartyType;
  } & Record<string, unknown>) & {
    identityId: Defined;
    id: Defined;
    partyId: Defined;
    partyType: Defined;
  },
  ResponseBrand
>;
export type ResponseC = t.BrandC<
  t.IntersectionC<
    [
      t.IntersectionC<
        [
          t.PartialC<{
            identityId: typeof Units_.IdentityId;
            id: typeof Units_.Uuid;
            partyId: typeof PersonalDocument_.PartyId;
            partyType: typeof PersonalDocument_.PartyType;
          }>,
          t.RecordC<t.StringC, t.UnknownC>,
        ]
      >,
      t.TypeC<{
        identityId: typeof Defined;
        id: typeof Defined;
        partyId: typeof Defined;
        partyType: typeof Defined;
      }>,
    ]
  >,
  ResponseBrand
>;
export const Response: ResponseC = t.brand(
  t.intersection([
    t.intersection([
      t.partial({
        identityId: Units_.IdentityId,
        id: Units_.Uuid,
        partyId: PersonalDocument_.PartyId,
        partyType: PersonalDocument_.PartyType,
      }),
      t.record(t.string, t.unknown),
    ]),
    t.type({
      identityId: Defined,
      id: Defined,
      partyId: Defined,
      partyType: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    ({
      identityId?: Units_.IdentityId;
      id?: Units_.Uuid;
      partyId?: PersonalDocument_.PartyId;
      partyType?: PersonalDocument_.PartyType;
    } & Record<string, unknown>) & {
      identityId: Defined;
      id: Defined;
      partyId: Defined;
      partyType: Defined;
    },
    ResponseBrand
  > => true,
  'Response',
);
export interface ResponseBrand {
  readonly Response: unique symbol;
}

export default Response;

// Success
