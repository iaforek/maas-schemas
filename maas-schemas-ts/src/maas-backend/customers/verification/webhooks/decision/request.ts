/*

undefined
Request schema for webhook verification decision

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Units_ from '../../../../../core/components/units';
import * as Common_ from '../../../../../core/components/common';
import * as PersonalDocument_ from '../../../../../core/personal-document';
import * as Address_ from '../../../../../core/components/address';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'http://maasglobal.com/maas-backend/customers/verification/webhooks/decision/request.json';

// Request
// The default export. More information at the top.
export type Request = t.Branded<
  {
    payload?: {
      status?: string & ('fail' | 'success');
      verification?: {
        id?: Units_.Uuid;
        code?: number & (9001 | 9102 | 9103 | 9104 | 9121);
        person?: {
          firstName?: Common_.PersonalName | null;
          lastName?: Common_.PersonalName | null;
        } & Record<string, unknown>;
        document?: {
          number?: string | null;
          type?: PersonalDocument_.DocumentType;
          country?: Address_.Country;
          validFrom?: Units_.IsoDate | null;
          validUntil?: Units_.IsoDate | null;
        };
        reason?: string;
        reasonCode?: number | null;
        status?: string;
        additionalVerifiedData?: Record<string, unknown>;
        vendorData?: string;
        decisionTime?: string;
        acceptanceTime?: string;
      } & {
        id: Defined;
        status: Defined;
        code: Defined;
        person: Defined;
        document: Defined;
      };
    } & {
      status: Defined;
      verification: Defined;
    };
    headers?: {
      'x-signature'?: string;
      'x-auth-client'?: Units_.Uuid;
    } & {
      'x-signature': Defined;
      'x-auth-client': Defined;
    };
    technicalData?: {
      ip?: string;
    };
    rawPayload?: string;
  } & {
    headers: Defined;
    payload: Defined;
  },
  RequestBrand
>;
export type RequestC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        payload: t.IntersectionC<
          [
            t.PartialC<{
              status: t.IntersectionC<
                [t.StringC, t.UnionC<[t.LiteralC<'fail'>, t.LiteralC<'success'>]>]
              >;
              verification: t.IntersectionC<
                [
                  t.PartialC<{
                    id: typeof Units_.Uuid;
                    code: t.IntersectionC<
                      [
                        t.NumberC,
                        t.UnionC<
                          [
                            t.LiteralC<9001>,
                            t.LiteralC<9102>,
                            t.LiteralC<9103>,
                            t.LiteralC<9104>,
                            t.LiteralC<9121>,
                          ]
                        >,
                      ]
                    >;
                    person: t.IntersectionC<
                      [
                        t.PartialC<{
                          firstName: t.UnionC<[typeof Common_.PersonalName, t.NullC]>;
                          lastName: t.UnionC<[typeof Common_.PersonalName, t.NullC]>;
                        }>,
                        t.RecordC<t.StringC, t.UnknownC>,
                      ]
                    >;
                    document: t.PartialC<{
                      number: t.UnionC<[t.StringC, t.NullC]>;
                      type: typeof PersonalDocument_.DocumentType;
                      country: typeof Address_.Country;
                      validFrom: t.UnionC<[typeof Units_.IsoDate, t.NullC]>;
                      validUntil: t.UnionC<[typeof Units_.IsoDate, t.NullC]>;
                    }>;
                    reason: t.StringC;
                    reasonCode: t.UnionC<[t.NumberC, t.NullC]>;
                    status: t.StringC;
                    additionalVerifiedData: t.UnknownRecordC;
                    vendorData: t.StringC;
                    decisionTime: t.StringC;
                    acceptanceTime: t.StringC;
                  }>,
                  t.TypeC<{
                    id: typeof Defined;
                    status: typeof Defined;
                    code: typeof Defined;
                    person: typeof Defined;
                    document: typeof Defined;
                  }>,
                ]
              >;
            }>,
            t.TypeC<{
              status: typeof Defined;
              verification: typeof Defined;
            }>,
          ]
        >;
        headers: t.IntersectionC<
          [
            t.PartialC<{
              'x-signature': t.StringC;
              'x-auth-client': typeof Units_.Uuid;
            }>,
            t.TypeC<{
              'x-signature': typeof Defined;
              'x-auth-client': typeof Defined;
            }>,
          ]
        >;
        technicalData: t.PartialC<{
          ip: t.StringC;
        }>;
        rawPayload: t.StringC;
      }>,
      t.TypeC<{
        headers: typeof Defined;
        payload: typeof Defined;
      }>,
    ]
  >,
  RequestBrand
>;
export const Request: RequestC = t.brand(
  t.intersection([
    t.partial({
      payload: t.intersection([
        t.partial({
          status: t.intersection([
            t.string,
            t.union([t.literal('fail'), t.literal('success')]),
          ]),
          verification: t.intersection([
            t.partial({
              id: Units_.Uuid,
              code: t.intersection([
                t.number,
                t.union([
                  t.literal(9001),
                  t.literal(9102),
                  t.literal(9103),
                  t.literal(9104),
                  t.literal(9121),
                ]),
              ]),
              person: t.intersection([
                t.partial({
                  firstName: t.union([Common_.PersonalName, t.null]),
                  lastName: t.union([Common_.PersonalName, t.null]),
                }),
                t.record(t.string, t.unknown),
              ]),
              document: t.partial({
                number: t.union([t.string, t.null]),
                type: PersonalDocument_.DocumentType,
                country: Address_.Country,
                validFrom: t.union([Units_.IsoDate, t.null]),
                validUntil: t.union([Units_.IsoDate, t.null]),
              }),
              reason: t.string,
              reasonCode: t.union([t.number, t.null]),
              status: t.string,
              additionalVerifiedData: t.UnknownRecord,
              vendorData: t.string,
              decisionTime: t.string,
              acceptanceTime: t.string,
            }),
            t.type({
              id: Defined,
              status: Defined,
              code: Defined,
              person: Defined,
              document: Defined,
            }),
          ]),
        }),
        t.type({
          status: Defined,
          verification: Defined,
        }),
      ]),
      headers: t.intersection([
        t.partial({
          'x-signature': t.string,
          'x-auth-client': Units_.Uuid,
        }),
        t.type({
          'x-signature': Defined,
          'x-auth-client': Defined,
        }),
      ]),
      technicalData: t.partial({
        ip: t.string,
      }),
      rawPayload: t.string,
    }),
    t.type({
      headers: Defined,
      payload: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      payload?: {
        status?: string & ('fail' | 'success');
        verification?: {
          id?: Units_.Uuid;
          code?: number & (9001 | 9102 | 9103 | 9104 | 9121);
          person?: {
            firstName?: Common_.PersonalName | null;
            lastName?: Common_.PersonalName | null;
          } & Record<string, unknown>;
          document?: {
            number?: string | null;
            type?: PersonalDocument_.DocumentType;
            country?: Address_.Country;
            validFrom?: Units_.IsoDate | null;
            validUntil?: Units_.IsoDate | null;
          };
          reason?: string;
          reasonCode?: number | null;
          status?: string;
          additionalVerifiedData?: Record<string, unknown>;
          vendorData?: string;
          decisionTime?: string;
          acceptanceTime?: string;
        } & {
          id: Defined;
          status: Defined;
          code: Defined;
          person: Defined;
          document: Defined;
        };
      } & {
        status: Defined;
        verification: Defined;
      };
      headers?: {
        'x-signature'?: string;
        'x-auth-client'?: Units_.Uuid;
      } & {
        'x-signature': Defined;
        'x-auth-client': Defined;
      };
      technicalData?: {
        ip?: string;
      };
      rawPayload?: string;
    } & {
      headers: Defined;
      payload: Defined;
    },
    RequestBrand
  > => true,
  'Request',
);
export interface RequestBrand {
  readonly Request: unique symbol;
}

export default Request;

// Success
