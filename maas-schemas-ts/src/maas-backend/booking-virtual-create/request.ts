/*

undefined
Request schema for booking-virtual-create

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Common_ from '../../core/components/common';
import * as Product_ from '../../core/product';
import * as Units_ from '../../core/components/units';
import * as Fare_ from '../../core/components/fare';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'http://maasglobal.com/maas-backend/booking-virtual-create/request.json';

// Request
// The default export. More information at the top.
export type Request = t.Branded<
  Array<
    ({
      paymentSourceId?: Common_.PaymentSourceId;
      productId?: Product_.Id;
      identityId?: Units_.IdentityId;
      fare?: Fare_.Fare;
      description?: string;
      startTime?: Units_.Time;
      endTime?: Units_.Time;
    } & Record<string, unknown>) & {
      productId: Defined;
      fare: Defined;
      identityId: Defined;
    }
  >,
  RequestBrand
>;
export type RequestC = t.BrandC<
  t.ArrayC<
    t.IntersectionC<
      [
        t.IntersectionC<
          [
            t.PartialC<{
              paymentSourceId: typeof Common_.PaymentSourceId;
              productId: typeof Product_.Id;
              identityId: typeof Units_.IdentityId;
              fare: typeof Fare_.Fare;
              description: t.StringC;
              startTime: typeof Units_.Time;
              endTime: typeof Units_.Time;
            }>,
            t.RecordC<t.StringC, t.UnknownC>,
          ]
        >,
        t.TypeC<{
          productId: typeof Defined;
          fare: typeof Defined;
          identityId: typeof Defined;
        }>,
      ]
    >
  >,
  RequestBrand
>;
export const Request: RequestC = t.brand(
  t.array(
    t.intersection([
      t.intersection([
        t.partial({
          paymentSourceId: Common_.PaymentSourceId,
          productId: Product_.Id,
          identityId: Units_.IdentityId,
          fare: Fare_.Fare,
          description: t.string,
          startTime: Units_.Time,
          endTime: Units_.Time,
        }),
        t.record(t.string, t.unknown),
      ]),
      t.type({
        productId: Defined,
        fare: Defined,
        identityId: Defined,
      }),
    ]),
  ),
  (
    x,
  ): x is t.Branded<
    Array<
      ({
        paymentSourceId?: Common_.PaymentSourceId;
        productId?: Product_.Id;
        identityId?: Units_.IdentityId;
        fare?: Fare_.Fare;
        description?: string;
        startTime?: Units_.Time;
        endTime?: Units_.Time;
      } & Record<string, unknown>) & {
        productId: Defined;
        fare: Defined;
        identityId: Defined;
      }
    >,
    RequestBrand
  > => true,
  'Request',
);
export interface RequestBrand {
  readonly Request: unique symbol;
}

export default Request;

// Success
