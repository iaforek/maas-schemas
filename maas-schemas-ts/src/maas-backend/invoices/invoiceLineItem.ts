/*

undefined
MaaS InvoiceLineItem schema

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as InvoiceUnits_ from './invoiceUnits';
import * as Units_ from '../../core/components/units';
import * as Fare_ from '../../core/components/fare';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'http://maasglobal.com/maas-backend/invoices/invoiceLineItem.json';

// InvoiceLineItem
// Invoice line item
export type InvoiceLineItem = t.Branded<
  {
    id?: InvoiceUnits_.InvoiceLineItemId;
    gatewayId?: string;
    invoiceId?: InvoiceUnits_.InvoiceId;
    type?: string & ('authorization' | 'capture' | 'charge' | 'refund');
    paymentSourceId?: string;
    date?: Units_.Time;
    description?: string;
    amount?: number;
    currency?: Units_.Currency;
    referenceInvoiceLineItemId?: InvoiceUnits_.InvoiceLineItemId;
    tokenId?: Fare_.TokenId;
    token?: Record<string, unknown>;
  } & {
    id: Defined;
    gatewayId: Defined;
    description: Defined;
    amount: Defined;
    currency: Defined;
    type: Defined;
  },
  InvoiceLineItemBrand
>;
export type InvoiceLineItemC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        id: typeof InvoiceUnits_.InvoiceLineItemId;
        gatewayId: t.StringC;
        invoiceId: typeof InvoiceUnits_.InvoiceId;
        type: t.IntersectionC<
          [
            t.StringC,
            t.UnionC<
              [
                t.LiteralC<'authorization'>,
                t.LiteralC<'capture'>,
                t.LiteralC<'charge'>,
                t.LiteralC<'refund'>,
              ]
            >,
          ]
        >;
        paymentSourceId: t.StringC;
        date: typeof Units_.Time;
        description: t.StringC;
        amount: t.NumberC;
        currency: typeof Units_.Currency;
        referenceInvoiceLineItemId: typeof InvoiceUnits_.InvoiceLineItemId;
        tokenId: typeof Fare_.TokenId;
        token: t.UnknownRecordC;
      }>,
      t.TypeC<{
        id: typeof Defined;
        gatewayId: typeof Defined;
        description: typeof Defined;
        amount: typeof Defined;
        currency: typeof Defined;
        type: typeof Defined;
      }>,
    ]
  >,
  InvoiceLineItemBrand
>;
export const InvoiceLineItem: InvoiceLineItemC = t.brand(
  t.intersection([
    t.partial({
      id: InvoiceUnits_.InvoiceLineItemId,
      gatewayId: t.string,
      invoiceId: InvoiceUnits_.InvoiceId,
      type: t.intersection([
        t.string,
        t.union([
          t.literal('authorization'),
          t.literal('capture'),
          t.literal('charge'),
          t.literal('refund'),
        ]),
      ]),
      paymentSourceId: t.string,
      date: Units_.Time,
      description: t.string,
      amount: t.number,
      currency: Units_.Currency,
      referenceInvoiceLineItemId: InvoiceUnits_.InvoiceLineItemId,
      tokenId: Fare_.TokenId,
      token: t.UnknownRecord,
    }),
    t.type({
      id: Defined,
      gatewayId: Defined,
      description: Defined,
      amount: Defined,
      currency: Defined,
      type: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: InvoiceUnits_.InvoiceLineItemId;
      gatewayId?: string;
      invoiceId?: InvoiceUnits_.InvoiceId;
      type?: string & ('authorization' | 'capture' | 'charge' | 'refund');
      paymentSourceId?: string;
      date?: Units_.Time;
      description?: string;
      amount?: number;
      currency?: Units_.Currency;
      referenceInvoiceLineItemId?: InvoiceUnits_.InvoiceLineItemId;
      tokenId?: Fare_.TokenId;
      token?: Record<string, unknown>;
    } & {
      id: Defined;
      gatewayId: Defined;
      description: Defined;
      amount: Defined;
      currency: Defined;
      type: Defined;
    },
    InvoiceLineItemBrand
  > => true,
  'InvoiceLineItem',
);
export interface InvoiceLineItemBrand {
  readonly InvoiceLineItem: unique symbol;
}

// Success
