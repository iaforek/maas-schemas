/*

undefined
Response schema for profile-devices-put

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Units_ from '../../../core/components/units';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'http://maasglobal.com/maas-backend/profile/profile-devices-put/response.json';

// Device
// The purpose of this remains a mystery
export type Device = t.Branded<
  {
    devicePushToken?: string;
    deviceIdentifier?: Units_.Uuid;
    deviceType?: string & ('iOS' | 'Android');
  } & {
    devicePushToken: Defined;
    deviceIdentifier: Defined;
    deviceType: Defined;
  },
  DeviceBrand
>;
export type DeviceC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        devicePushToken: t.StringC;
        deviceIdentifier: typeof Units_.Uuid;
        deviceType: t.IntersectionC<
          [t.StringC, t.UnionC<[t.LiteralC<'iOS'>, t.LiteralC<'Android'>]>]
        >;
      }>,
      t.TypeC<{
        devicePushToken: typeof Defined;
        deviceIdentifier: typeof Defined;
        deviceType: typeof Defined;
      }>,
    ]
  >,
  DeviceBrand
>;
export const Device: DeviceC = t.brand(
  t.intersection([
    t.partial({
      devicePushToken: t.string,
      deviceIdentifier: Units_.Uuid,
      deviceType: t.intersection([
        t.string,
        t.union([t.literal('iOS'), t.literal('Android')]),
      ]),
    }),
    t.type({
      devicePushToken: Defined,
      deviceIdentifier: Defined,
      deviceType: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      devicePushToken?: string;
      deviceIdentifier?: Units_.Uuid;
      deviceType?: string & ('iOS' | 'Android');
    } & {
      devicePushToken: Defined;
      deviceIdentifier: Defined;
      deviceType: Defined;
    },
    DeviceBrand
  > => true,
  'Device',
);
export interface DeviceBrand {
  readonly Device: unique symbol;
}

// Response
// The default export. More information at the top.
export type Response = t.Branded<
  {
    device?: Device;
    debug?: Record<string, unknown>;
  } & {
    device: Defined;
  },
  ResponseBrand
>;
export type ResponseC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        device: typeof Device;
        debug: t.UnknownRecordC;
      }>,
      t.TypeC<{
        device: typeof Defined;
      }>,
    ]
  >,
  ResponseBrand
>;
export const Response: ResponseC = t.brand(
  t.intersection([
    t.partial({
      device: Device,
      debug: t.UnknownRecord,
    }),
    t.type({
      device: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      device?: Device;
      debug?: Record<string, unknown>;
    } & {
      device: Defined;
    },
    ResponseBrand
  > => true,
  'Response',
);
export interface ResponseBrand {
  readonly Response: unique symbol;
}

export default Response;

// Success
