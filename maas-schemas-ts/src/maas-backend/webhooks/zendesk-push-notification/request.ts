/*

undefined
MaaS Zendesk push notification forwarder request schema.

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Common_ from '../../../core/components/common';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'http://maasglobal.com/maas-backend/webhooks/zendesk-push-notification/request.json';

// Request
// The default export. More information at the top.
export type Request = t.Branded<
  {
    devices?: Array<
      {
        identifier?: Common_.DeviceToken;
        type?: 'ios' | 'android';
      } & {
        identifier: Defined;
        type: Defined;
      }
    >;
    notification?: {
      body?: string;
      title?: string;
      ticket_id?: string;
    };
  } & {
    devices: Defined;
    notification: Defined;
  },
  RequestBrand
>;
export type RequestC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        devices: t.ArrayC<
          t.IntersectionC<
            [
              t.PartialC<{
                identifier: typeof Common_.DeviceToken;
                type: t.UnionC<[t.LiteralC<'ios'>, t.LiteralC<'android'>]>;
              }>,
              t.TypeC<{
                identifier: typeof Defined;
                type: typeof Defined;
              }>,
            ]
          >
        >;
        notification: t.PartialC<{
          body: t.StringC;
          title: t.StringC;
          ticket_id: t.StringC;
        }>;
      }>,
      t.TypeC<{
        devices: typeof Defined;
        notification: typeof Defined;
      }>,
    ]
  >,
  RequestBrand
>;
export const Request: RequestC = t.brand(
  t.intersection([
    t.partial({
      devices: t.array(
        t.intersection([
          t.partial({
            identifier: Common_.DeviceToken,
            type: t.union([t.literal('ios'), t.literal('android')]),
          }),
          t.type({
            identifier: Defined,
            type: Defined,
          }),
        ]),
      ),
      notification: t.partial({
        body: t.string,
        title: t.string,
        ticket_id: t.string,
      }),
    }),
    t.type({
      devices: Defined,
      notification: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      devices?: Array<
        {
          identifier?: Common_.DeviceToken;
          type?: 'ios' | 'android';
        } & {
          identifier: Defined;
          type: Defined;
        }
      >;
      notification?: {
        body?: string;
        title?: string;
        ticket_id?: string;
      };
    } & {
      devices: Defined;
      notification: Defined;
    },
    RequestBrand
  > => true,
  'Request',
);
export interface RequestBrand {
  readonly Request: unique symbol;
}

export default Request;

// Success
