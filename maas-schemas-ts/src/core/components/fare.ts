/*

undefined
A fare/price as billed to the user in WMPs or in tokens

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Common_ from './common';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId = 'http://maasglobal.com/core/components/fare.json';

// TokenId
// The purpose of this remains a mystery
export type TokenId = t.Branded<string, TokenIdBrand>;
export type TokenIdC = t.BrandC<t.StringC, TokenIdBrand>;
export const TokenId: TokenIdC = t.brand(
  t.string,
  (x): x is t.Branded<string, TokenIdBrand> =>
    typeof x !== 'string' || x.match(RegExp('^[a-z]+(-[a-z0-9_]+)+$')) !== null,
  'TokenId',
);
export interface TokenIdBrand {
  readonly TokenId: unique symbol;
}

// FareType
// The purpose of this remains a mystery
export type FareType = t.Branded<string & ('charge' | 'refund'), FareTypeBrand>;
export type FareTypeC = t.BrandC<
  t.IntersectionC<[t.StringC, t.UnionC<[t.LiteralC<'charge'>, t.LiteralC<'refund'>]>]>,
  FareTypeBrand
>;
export const FareType: FareTypeC = t.brand(
  t.intersection([t.string, t.union([t.literal('charge'), t.literal('refund')])]),
  (x): x is t.Branded<string & ('charge' | 'refund'), FareTypeBrand> => true,
  'FareType',
);
export interface FareTypeBrand {
  readonly FareType: unique symbol;
}

// FareTypeCHARGE
// The purpose of this remains a mystery
export type FareTypeCHARGE = t.Branded<FareType & 'charge', FareTypeCHARGEBrand>;
export type FareTypeCHARGEC = t.BrandC<
  t.IntersectionC<[typeof FareType, t.LiteralC<'charge'>]>,
  FareTypeCHARGEBrand
>;
export const FareTypeCHARGE: FareTypeCHARGEC = t.brand(
  t.intersection([FareType, t.literal('charge')]),
  (x): x is t.Branded<FareType & 'charge', FareTypeCHARGEBrand> => true,
  'FareTypeCHARGE',
);
export interface FareTypeCHARGEBrand {
  readonly FareTypeCHARGE: unique symbol;
}
/** require('io-ts-validator').validator(FareTypeCHARGE).decodeSync(defaultFareTypeCHARGE) // => defaultFareTypeCHARGE */
export const defaultFareTypeCHARGE: FareTypeCHARGE = ('charge' as unknown) as FareTypeCHARGE;

// FareTypeREFUND
// The purpose of this remains a mystery
export type FareTypeREFUND = t.Branded<FareType & 'refund', FareTypeREFUNDBrand>;
export type FareTypeREFUNDC = t.BrandC<
  t.IntersectionC<[typeof FareType, t.LiteralC<'refund'>]>,
  FareTypeREFUNDBrand
>;
export const FareTypeREFUND: FareTypeREFUNDC = t.brand(
  t.intersection([FareType, t.literal('refund')]),
  (x): x is t.Branded<FareType & 'refund', FareTypeREFUNDBrand> => true,
  'FareTypeREFUND',
);
export interface FareTypeREFUNDBrand {
  readonly FareTypeREFUND: unique symbol;
}
/** require('io-ts-validator').validator(FareTypeREFUND).decodeSync(defaultFareTypeREFUND) // => defaultFareTypeREFUND */
export const defaultFareTypeREFUND: FareTypeREFUND = ('refund' as unknown) as FareTypeREFUND;

// Fare
// The default export. More information at the top.
export type Fare = t.Branded<
  {
    amount?: number | null;
    currency?: Common_.MetaCurrency;
    tokenId?: TokenId;
    hidden?: boolean;
    originalAmount?: number | null;
    productionAmount?: number | null;
    type?: FareType;
  } & {
    amount: Defined;
    currency: Defined;
  },
  FareBrand
>;
export type FareC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        amount: t.UnionC<[t.NumberC, t.NullC]>;
        currency: typeof Common_.MetaCurrency;
        tokenId: typeof TokenId;
        hidden: t.BooleanC;
        originalAmount: t.UnionC<[t.NumberC, t.NullC]>;
        productionAmount: t.UnionC<[t.NumberC, t.NullC]>;
        type: typeof FareType;
      }>,
      t.TypeC<{
        amount: typeof Defined;
        currency: typeof Defined;
      }>,
    ]
  >,
  FareBrand
>;
export const Fare: FareC = t.brand(
  t.intersection([
    t.partial({
      amount: t.union([t.number, t.null]),
      currency: Common_.MetaCurrency,
      tokenId: TokenId,
      hidden: t.boolean,
      originalAmount: t.union([t.number, t.null]),
      productionAmount: t.union([t.number, t.null]),
      type: FareType,
    }),
    t.type({
      amount: Defined,
      currency: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      amount?: number | null;
      currency?: Common_.MetaCurrency;
      tokenId?: TokenId;
      hidden?: boolean;
      originalAmount?: number | null;
      productionAmount?: number | null;
      type?: FareType;
    } & {
      amount: Defined;
      currency: Defined;
    },
    FareBrand
  > => true,
  'Fare',
);
export interface FareBrand {
  readonly Fare: unique symbol;
}

export default Fare;

// Success
